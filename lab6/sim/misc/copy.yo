                            | # name: Ao Yuchen
                            | # s_id: 518021910545
                            | 
                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp      # Set up stack pointer
0x00a: 804800000000000000   |     call main               # Execute main program
0x013: 00                   |     halt                    # Terminate program
                            | 
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: b000000000000000     |     .quad 0x0b0
0x028: 000c000000000000     |     .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     |     .quad 0x111
0x038: 2202000000000000     |     .quad 0x222
0x040: 3303000000000000     |     .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq src, %rdi        # long *src
0x052: 30f63000000000000000 |     irmovq dest, %rsi       # long *dest
0x05c: 30f20300000000000000 |     irmovq $3, %rdx         # long len
0x066: 807000000000000000   |     call copy_block         # Call function of my implementation
0x06f: 90                   |     ret
                            | 
                            | # copy_block - Copy src to dest and return xor checksum of src
0x070:                      | copy_block:
0x070: 30f80800000000000000 |     irmovq $8, %r8          # Constant 8
0x07a: 30f90100000000000000 |     irmovq $1, %r9          # Constant 1
0x084: 6300                 |     xorq %rax, %rax         # result = 0
0x086: 70ab00000000000000   |     jmp test                # Goto test
0x08f:                      | loop:
0x08f: 50370000000000000000 |     mrmovq (%rdi), %rbx     # val = *src
0x099: 40360000000000000000 |     rmmovq %rbx, (%rsi)     # *dest = val
0x0a3: 6087                 |     addq %r8, %rdi          # src++
0x0a5: 6086                 |     addq %r8, %rsi          # dest++
0x0a7: 6330                 |     xorq %rbx, %rax         # result ^= val
0x0a9: 6192                 |     subq %r9, %rdx          # len--
0x0ab:                      | test:
0x0ab: 6222                 |     andq %rdx, %rdx         # Set CC
0x0ad: 748f00000000000000   |     jne loop
0x0b6: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower address
0x200:                      |     .pos 0x200
0x200:                      | stack:
