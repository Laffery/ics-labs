# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Sample linked list
.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
    irmovq ele1, %rdi       # Head of linked list
    call rsum_list          # Call function of my implementation
    ret

# rsum_list - Recursive version of sum_list
rsum_list:
    xorq %rax, %rax         # val = 0
    andq %rdi, %rdi         # Set CC
    je return               # !ls -> return 0
recursive:
    pushq %rbx              # callee saved register to help recursive
    mrmovq (%rdi), %rbx     # Get ls->val
    mrmovq 0x8(%rdi), %rdi  # ls = ls->next
    call rsum_list          # rsum_list(le->next), stored in %rax
    addq %rbx, %rax         # val + rest
    popq %rbx
return:
    ret

# Stack starts here and grows to lower address
    .pos 0x200
stack:
